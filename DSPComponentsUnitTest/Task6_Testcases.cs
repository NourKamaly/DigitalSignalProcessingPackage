using DSPAlgorithms.Algorithms;
using DSPAlgorithms.DataStructures;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DSPComponentsUnitTest
{
    [TestClass]
    public class Task6_Testcases
    {
        [TestMethod]
        public void DCTTestcase()
        {
            DCT dct = new DCT();

            var expectedOutput = new Signal(new List<float>() { 500.000000000000f,-286.567797994563f,-8.41655611750505f,-31.8303817375762f,-19.6289452590712f,341.012130701940f,16.0468017556445f,-5.83672785237134f,4.52076943613914f,-3.52615171587443f,2.34726960034625f,-2.35651740529172f,1.47663319735315f,-1.68377880322527f,1.02532770297377f,-1.26167068150633f,0.757050448078380f,-0.979541891586503f,0.583144814439414f,-0.781690916840974f,0.463396778763524f,-0.637597667098876f,0.377160463472780f,-0.529402256148018f,0.312860425920515f,-0.446088499477527f,0.263562222831680f,-0.380562158116604f,0.224890563819162f,-0.328087295056795f,0.193966942769819f,-0.285404407327704f,0.168831054658939f,-0.250210609984686f,0.148108561893722f,-0.220841447571546f,0.130811739866135f,-0.196069664120877f,0.116215321761198f,-0.174974259353145f,0.103776668771775f,-0.156853112232979f,0.0930829984354837f,-0.141163359451901f,0.0838156413062565f,-0.127479891590472f,0.0757253046986081f,-0.115465937158948f,0.0686146221911439f,-0.104851871865417f,0.0623256289400231f,-0.0954197255077558f,0.0567306312823711f,-0.0869917002426715f,0.0517254558868390f,-0.0794215552865975f,0.0472243933580754f,-0.0725880679968652f,0.0431563657859132f,-0.0663900180204009f,0.0394619900096538f,-0.0607423016542752f,0.0360913043134819f,-0.0555728939269739f,0.0330019919758728f,-0.0508204528622480f,0.0301579807445327f,-0.0464324147222727f,0.0275283294412200f,-0.0423634678499762f,0.0250863357977694f,-0.0385743207718899f,0.0228088161290136f,-0.0350307006888879f,0.0206755194672735f,-0.0317025335562519f,0.0186686476250986f,-0.0285632681665493f,0.0167724592181640f,-0.0255893150446505f,0.0149729405895357f,-0.0227595773106057f,0.0132575302857142f,-0.0200550554881032f,0.0116148865482267f,-0.0174585119308578f,0.0100346894375039f,-0.0149541833730448f,0.00850747085561535f,-0.0125275323075471f,0.00702446701115135f,-0.0101650295879948f,0.00557748885078901f,-0.00785396196800462f,0.00415880674087554f,-0.00558225930110912f,0.00276104626497662f,-0.00333833690211531f,0.00137709244241012f,-0.00111094915171966f}, false);
            dct.InputSignal = new Signal(new List<float>() {50.3844170297569f,49.5528258147577f,47.5503262094184f,44.4508497187474f,40.3553390593274f,35.3892626146237f,29.6995249869773f,23.4508497187474f,16.8217232520115f,10.0000000000000f,3.17827674798847f,-3.45084971874737f,-9.69952498697734f,-15.3892626146237f,-20.3553390593274f,-24.4508497187474f,-27.5503262094184f,-29.5528258147577f,-30.3844170297569f,-30f,-28.3844170297569f,-25.5528258147577f,-21.5503262094184f,-16.4508497187474f,-10.3553390593274f,-3.38926261462366f,4.30047501302266f,12.5491502812526f,21.1782767479885f,30.0000000000000f,38.8217232520115f,47.4508497187474f,55.6995249869773f,63.3892626146237f,70.3553390593274f,76.4508497187474f,81.5503262094184f,85.5528258147577f,88.3844170297569f,90f,90.3844170297569f,89.5528258147577f,87.5503262094184f,84.4508497187474f,80.3553390593274f,75.3892626146237f,69.6995249869773f,63.4508497187474f,56.8217232520116f,50.0000000000000f,43.1782767479885f,36.5491502812526f,30.3004750130226f,24.6107373853764f,19.6446609406726f,15.5491502812526f,12.4496737905816f,10.4471741852423f,9.61558297024313f,10f,11.6155829702431f,14.4471741852423f,18.4496737905816f,23.5491502812526f,29.6446609406726f,36.6107373853763f,44.3004750130226f,52.5491502812526f,61.1782767479885f,70.0000000000000f,78.8217232520116f,87.4508497187474f,95.6995249869773f,103.389262614624f,110.355339059327f,116.450849718747f,121.550326209418f,125.552825814758f,128.384417029757f,130f,130.384417029757f,129.552825814758f,127.550326209418f,124.450849718747f,120.355339059327f,115.389262614624f,109.699524986977f,103.450849718747f,96.8217232520115f,90.0000000000000f,83.1782767479885f,76.5491502812527f,70.3004750130227f,64.6107373853763f,59.6446609406726f,55.5491502812526f,52.4496737905816f,50.4471741852424f,49.6155829702431f,50f}, false);
            dct.Run();

            Assert.IsTrue(UnitTestUtitlities.SignalsSamplesAreEqual(expectedOutput.Samples, dct.OutputSignal.Samples));
       
        }

        [TestMethod]
        public void DC_ComponentTestcase()
        {
            DC_Component dc = new DC_Component();

            var expectedOutput = new Signal(new List<float>() { -49.5000000000000f, -48.5000000000000f, -47.5000000000000f, -46.5000000000000f, -45.5000000000000f, -44.5000000000000f, -43.5000000000000f, -42.5000000000000f, -41.5000000000000f, -40.5000000000000f, -39.5000000000000f, -38.5000000000000f, -37.5000000000000f, -36.5000000000000f, -35.5000000000000f, -34.5000000000000f, -33.5000000000000f, -32.5000000000000f, -31.5000000000000f, -30.5000000000000f, -29.5000000000000f, -28.5000000000000f, -27.5000000000000f, -26.5000000000000f, -25.5000000000000f, -24.5000000000000f, -23.5000000000000f, -22.5000000000000f, -21.5000000000000f, -20.5000000000000f, -19.5000000000000f, -18.5000000000000f, -17.5000000000000f, -16.5000000000000f, -15.5000000000000f, -14.5000000000000f, -13.5000000000000f, -12.5000000000000f, -11.5000000000000f, -10.5000000000000f, -9.50000000000000f, -8.50000000000000f, -7.50000000000000f, -6.50000000000000f, -5.50000000000000f, -4.50000000000000f, -3.50000000000000f, -2.50000000000000f, -1.50000000000000f, -0.500000000000000f, 0.500000000000000f, 1.50000000000000f, 2.50000000000000f, 3.50000000000000f, 4.50000000000000f, 5.50000000000000f, 6.50000000000000f, 7.50000000000000f, 8.50000000000000f, 9.50000000000000f, 10.5000000000000f, 11.5000000000000f, 12.5000000000000f, 13.5000000000000f, 14.5000000000000f, 15.5000000000000f, 16.5000000000000f, 17.5000000000000f, 18.5000000000000f, 19.5000000000000f, 20.5000000000000f, 21.5000000000000f, 22.5000000000000f, 23.5000000000000f, 24.5000000000000f, 25.5000000000000f, 26.5000000000000f, 27.5000000000000f, 28.5000000000000f, 29.5000000000000f, 30.5000000000000f, 31.5000000000000f, 32.5000000000000f, 33.5000000000000f, 34.5000000000000f, 35.5000000000000f, 36.5000000000000f, 37.5000000000000f, 38.5000000000000f, 39.5000000000000f, 40.5000000000000f, 41.5000000000000f, 42.5000000000000f, 43.5000000000000f, 44.5000000000000f, 45.5000000000000f, 46.5000000000000f, 47.5000000000000f, 48.5000000000000f, 49.5000000000000f }, false);
            dc.InputSignal = new Signal(new List<float>() { 1f, 2f, 3f, 4f, 5f, 6f, 7f, 8f, 9f, 10f, 11f, 12f, 13f, 14f, 15f, 16f, 17f, 18f, 19f, 20f, 21f, 22f, 23f, 24f, 25f, 26f, 27f, 28f, 29f, 30f, 31f, 32f, 33f, 34f, 35f, 36f, 37f, 38f, 39f, 40f, 41f, 42f, 43f, 44f, 45f, 46f, 47f, 48f, 49f, 50f, 51f, 52f, 53f, 54f, 55f, 56f, 57f, 58f, 59f, 60f, 61f, 62f, 63f, 64f, 65f, 66f, 67f, 68f, 69f, 70f, 71f, 72f, 73f, 74f, 75f, 76f, 77f, 78f, 79f, 80f, 81f, 82f, 83f, 84f, 85f, 86f, 87f, 88f, 89f, 90f, 91f, 92f, 93f, 94f, 95f, 96f, 97f, 98f, 99f, 100f }, false);

            dc.Run();

            Assert.IsTrue(UnitTestUtitlities.SignalsSamplesAreEqual(expectedOutput.Samples, dc.OutputSignal.Samples));

        }

        [TestMethod]
        public void SamplingTestcase1()
        {
            var sig1 = UnitTestUtitlities.LoadSignal("TestingSignals/ecg400.ds");
            Signal expectedOutput = new Signal(new List<float> { 0.04935597f, -0.07165951f, 0.09261586f, -0.09037347f, 0.1056597f, -0.08048439f, -0.01038062f, 0.2570988f, -0.6476495f, 1.183434f, -1.811138f, 2.587852f, -3.67504f, -21.1769f, -16.46969f, -17.59398f, -20.55852f, -18.98507f, -20.24818f, -20.01654f, -21.05973f, -19.78587f, -18.96638f, -10.35183f, -4.45535f, -3.924692f, 5.796741f, 9.796752f, 7.302893f, 9.598067f, 5.54111f, -0.4124517f, 4.775912f, 11.39121f, 13.63302f, 21.99015f, 20.56724f, 9.314501f, 19.48193f, 24.63404f, 21.58795f, 34.53657f, 34.64909f, 26.82737f, 29.04066f, 24.51504f, 18.74955f, 8.206266f, -1.329533f, -5.237903f, -15.74046f, -19.62936f, -19.41714f, -20.85766f, -19.78715f, -19.89813f, -19.64947f, -21.28601f, -25.04761f, -26.33329f, -27.26534f, -27.06245f, -26.36319f, -27.85591f, -28.58529f, -31.82818f, -30.75813f, -29.27204f, -29.58899f, -40.03488f, -56.36599f, -57.63182f, -46.79147f, -23.65371f, 32.3186f, 106.6858f, 176.9745f, 307.9948f, 399.4362f, 388.4262f, 450.7768f, 404.5267f, 259.8622f, 280.1642f, 217.0792f, 103.6807f, 66.08805f, 10.1152f, -14.43715f, -18.27871f, -13.19463f, -2.500603f, -3.558494f, -2.879193f, -1.081606f, -10.08183f, -10.98563f, -8.152247f, -6.863034f, -6.12595f, -8.491961f, -9.940888f, -10.28717f, -7.819818f, -8.08004f, -6.470641f, -3.829464f, -2.353399f, -1.160521f, 0.8812097f, 3.127196f, 6.797708f, 11.90453f, 9.354048f, 8.792031f, 11.93634f, 13.71888f, 17.26601f, 21.35648f, 20.39578f, 21.75083f, 26.89697f, 27.46476f, 30.24683f, 32.84463f, 34.2516f, 36.52111f, 38.37359f, 45.47596f, 50.01624f, 51.85755f, 56.54231f, 60.0601f, 63.42606f, 68.63049f, 72.34521f, 74.34101f, 81.74744f, 87.33677f, 91.76587f, 101.204f, 109.1841f, 117.3287f, 125.8658f, 132.6874f, 139.7631f, 145.4199f, 153.1785f, 162.8651f, 172.4458f, 180.5921f, 186.5269f, 193.642f, 199.9357f, 205.5766f, 211.6541f, 215.5418f, 218.9743f, 221.1474f, 223.5638f, 226.5074f, 222.5846f, 218.4408f, 213.2667f, 202.5092f, 190.3698f, 176.8145f, 160.6022f, 146.5698f, 134.3284f, 118.0821f, 102.6239f, 88.82956f, 72.28568f, 60.5235f, 52.668f, 39.93533f, 30.51097f, 24.19839f, 15.11352f, 10.19366f, 8.231174f, 1.808034f, -1.156303f, -2.12428f, -5.762856f, -7.683114f, -9.731377f, -10.82206f, -11.91182f, -12.51321f, -13.26749f, -12.57864f, -10.59829f, -11.92442f, -12.813f, -12.77215f, -13.42785f, -13.31241f, -11.61073f, -14.64532f, -15.18243f, -11.4569f, -14.33963f, -12.78167f, -9.07142f, -9.700857f, -9.983706f, -12.78051f, -12.97261f, -13.26825f, -16.37736f, -11.19163f, -11.00962f, -14.41286f, -10.60665f, -9.358223f, -8.02786f, -10.14929f, -11.69232f, -10.86235f, -12.1195f, -11.87808f, -11.20169f, -10.89457f, -9.682479f, -8.59687f, -9.133419f, -10.23484f, -10.96677f, -11.13336f, -10.90484f, -10.29705f, -12.74486f, -13.59673f, -11.91061f, -12.53601f, -13.23022f, -12.76825f, -17.58321f, -17.87383f, -13.13883f, -15.7782f, -15.72565f, -15.4342f, -16.39829f, -16.06658f, -16.94456f, -13.88945f, -12.89112f, -15.64625f, -13.19006f, -13.20221f, -16.37731f, -11.19818f, -11.10641f, -16.31176f, -14.42415f, -15.94966f, -18.3237f, -15.97692f, -15.33747f, -15.43796f, -15.64756f, -16.20876f, -15.44021f, -15.69856f, -15.87853f, -15.35283f, -19.13718f, -19.72441f, -18.5661f, -17.77587f, -16.86785f, -19.55585f, -15.11413f, -15.09038f, -18.54682f, -17.07476f, -18.25148f, -17.13643f, -21.24305f, -21.707f, -16.95124f, -20.49783f, -20.13661f, -18.23856f, -18.53309f, -17.50053f, -18.45804f, -17.42721f, -17.78452f, -21.09706f, -17.87813f, -18.0881f, -20.93228f, -17.85757f, -17.53209f, -17.5097f, -19.31637f, -20.48882f, -19.99447f, -20.99599f, -20.0227f, -21.3363f, -17.44957f, -18.19329f, -23.26979f, -19.53766f, -18.28884f, -17.62029f, -19.23578f, -21.22246f, -20.0913f, -20.95534f, -19.77063f, -17.24449f, -20.53739f, -22.14396f, -21.59759f, -25.09703f, -25.15101f, -24.51826f, -22.69595f, -22.15042f, -23.95347f, -21.88384f, -21.41672f, -20.90762f, -21.60015f, -22.40276f, -20.50087f, -22.84862f, -21.50564f, -17.48233f, -15.5785f, -10.58723f, -7.079284f, 2.979974f, 7.607302f, 3.462723f, 7.326469f, 2.871381f, -1.759308f, -1.138093f, 5.924126f, 15.77271f, 20.28472f, 18.49283f, 9.013181f, 15.3716f, 21.04608f, 21.73996f, 33.04908f, 32.35023f, 27.02186f, 23.54391f, 20.71675f, 21.52304f, 9.540922f, -0.4521924f, -7.588264f, -16.2973f, -19.70559f, -23.33496f, -22.56228f, -24.28526f, -28.73929f, -28.07452f, -28.28169f, -29.38569f, -29.04637f, -30.29276f, -31.45054f, -31.17222f, -32.15136f, -31.01825f, -33.8126f, -32.37807f, -30.60804f, -33.27347f, -44.86319f, -63.1749f, -63.70394f, -54.14077f, -34.67403f, 27.2518f, 109.5868f, 183.8837f, 327.7273f, 418.7548f, 400.361f, 462.822f, 414.0996f, 271.0766f, 274.9802f, 207.7301f, 102.4237f, 69.9474f, 16.90354f, -11.92867f, -19.28539f, -13.83948f, -0.1663721f, -2.486402f, -2.984578f, -7.84244f, -5.003159f, -5.28322f, -12.72328f, -8.46478f, -8.378467f, -5.987184f, -9.829319f, -8.887135f, -3.015739f, -3.095445f, -0.9958964f, -3.240629f, 4.202066f, 5.147221f, -0.9626983f, 2.670714f, 3.131384f, 5.522836f, 6.596846f, 7.110301f, 10.89087f, 8.400646f, 11.29482f, 16.96902f, 17.7699f, 18.46346f, 17.0389f, 21.07708f, 24.25544f, 25.36941f, 29.83984f, 32.05458f, 33.67095f, 37.98492f, 41.14072f, 42.91537f, 47.42059f, 50.41652f, 53.43476f, 59.47601f, 64.84911f, 69.70019f, 74.44577f, 79.53485f, 84.47791f, 93.82263f, 100.0626f, 102.4577f, 111.4445f, 119.3739f, 126.5154f, 139.0691f, 146.623f, 152.6111f, 160.1414f, 167.3691f, 179.5778f, 180.3052f, 185.8856f, 198.8851f, 197.4683f, 203.5315f, 212.4055f, 213.7003f, 214.3119f, 213.1673f, 208.976f, 205.7513f, 204.8895f, 193.0029f, 184.4701f, 177.7622f, 162.8289f, 148.1817f, 132.7057f, 116.0839f, 100.7662f, 89.4384f, 68.36008f, 54.53717f, 48.87072f, 32.03004f, 23.52691f, 19.42275f, 13.39129f, 9.248284f, 4.020923f, -2.958114f, -6.503634f, -6.269008f, -6.398891f, -5.239197f, -7.268981f, -7.031011f, -8.862441f, -12.80469f, -8.853648f, -9.845275f, -10.85663f, -15.90676f, -14.27492f, -6.027798f, -7.805318f, -9.593466f, -13.86257f, -12.52219f, -10.55183f, -11.90325f, -10.07126f, -11.79492f, -13.92783f, -10.77155f, -9.592004f, -10.12752f, -13.73212f, -15.69801f, -15.79118f, -14.32775f, -13.88546f, -18.35939f, -15.18956f, -15.99689f, -17.42459f, -16.04564f, -17.04282f, -11.1125f, -22.32763f, -22.1863f, -6.117809f, -17.42232f, -16.12787f, -9.106511f, -16.72128f, -18.72812f, -21.76285f, -20.44485f, -18.57506f, -21.60237f, -16.81057f, -17.81859f, -21.55083f, -16.7648f, -16.43765f, -15.93191f, -23.68078f, -25.92367f, -18.00949f, -20.45751f, -18.97578f, -16.17118f, -23.47157f, -24.49408f, -22.29887f, -22.19676f, -22.00154f, -25.39904f, -21.64056f, -20.26779f, -24.16133f, -20.97727f, -22.86363f, -28.63684f, -23.79326f, -24.52536f, -28.65575f, -28.63893f, -27.83693f, -26.54673f, -23.02054f, -23.39938f, -29.64081f, -25.5379f, -25.65526f, -29.09681f, -26.2238f, -26.24121f, -25.09344f, -25.57095f, -25.90328f, -25.3466f, -29.39155f, -29.86382f, -28.69549f, -24.87368f, -24.52211f, -25.79589f, -27.17282f, -24.85744f, -21.1303f, -24.78351f, -29.04574f, -35.24358f, -28.28807f, -26.40419f, -29.47357f, -31.05379f, -31.299f, -26.11055f, -26.71562f, -26.17627f, -27.92563f, -27.38708f, -31.1165f, -30.29315f, -31.22802f, -19.86283f, 3.477826f, -0.4470182f, -0.5550098f, 0.8643193f, -0.8508323f, 0.7278979f, -0.523862f, 0.3189423f, -0.1113813f, -0.01006683f, 0.06144053f, -0.01712214f, 0f }, false);


            Sampling s = new Sampling();
            s.L = 3;
            s.M = 2;
            s.InputSignal = sig1;
            s.Run();

            Assert.IsTrue(UnitTestUtitlities.SignalsSamplesAreEqual(expectedOutput.Samples, s.OutputSignal.Samples));    
        }
		
    }
}
